 
                         JEngine
		----------------------------
		    version 0.x
		----------------------------
	This program is provided as it is. Use it at your own risk.
		See LICENSE for the license agreements
------------------------------------------------------------------------


1)---->            WHAT'S THAT?
-------------------------------

	The JEngine aims to be a complete audio engine, detached from 
interface libraries, suitable for audio programs (especially Dj oriented).
This is not a library, so you will not have something to compile but a
group of codefiles to be physically included in your package. The coding
language is C++/C.



2)---->            REQUIREMENTS
-------------------------------

	Actually:
	
o)- libsndfile;
o)- libmpeg3, http://heroinewarrior.com (experimental code!!!);


3)---->             DEVELOPMENT
-------------------------------

o)-> MAIN DESIGN

	The JEngine is currently under development. I projected it thinking
to the code architecture of IzSound (http://izsound.berlios.de): so JEngine
will be build (low level) as a chain of small dsp units in this way:

Input Units ---> Dsp Units ---> Output Units

Input Units: basically the decoding classes (you will find something
	as XXXfiledecoder.h and .cpp). There will be a generic input
	class to switch between the the others to pick up the right
	unit for every format (ogg, wav and mp3 are already in alpha
	code);
	
Dsp Units: they are all units to provide DSP processing, such as pitch,
	filter, gain and so on... IzSound ones are already in a good stable
	form so I'll use them. There will be a unit for LADSPA compatibility
	too... To be coded a mixer class: I want a multichannel mixing class,
	and each channel will be connected to a (stereo) decoder or an input chain. 
	To do it would be useful looking at the JackEQ mixing code, that seems to be 
	very nice;
	
Output Units: to provide output on different APIs. I'm thinking to a unit for
	the RtAudio C++ wrapper and for PortAudio (this will give crossplatform
	feature). To be decided if callback or blocking code; 
	
	
A "test" directory is set to debug and test all the code. The "common" dir contains
common code shared all arounf the JE while "external" dir contains code
from external libraries and packages included in JE. 

o)-> DETAILS && TODO && TOTHINK

	In the "input" directory there are decoder classes: I provided some
alpha code (not all works and nor all works fine...) to decode with Virbis
libs (base written by Julien PONGE), libsndfile formats and libMpeg3. A class
"InputSwitcher" has to be build and will have these charachterics:
- inherits DspUnit and can connect 1 input and 1 output;
- find out the right file format;
- find out the right input decoder class to use and build a FileDecoder object
  to connect to out and performDsp;
- inherits APlayer, but functions will call subclass decoder functions (i.e
  performDsp will call SndFileDecoder::performDsp() if we have a Wav file);
  
	In the "output" directory there are out classes: I wrote a draft for
RtAudio output. Some issues with this API: RtAudio can't playback different
streams on different out-channells of the same device. A class for every
device should be then created. To think about: lot of things here...

	In the "dsp" directory there are dsp processing classes: MCMixer
will be the mixing class. At first I thought to JackEQ as inspire-source
but maybe I'll use Mix.h from SndObj library to do the work. MCMixer
will accept multiple input and multiple output. Connect functions
should be reimplemented in a different way, to allow enable/disable
mixing an input over an output ( so maybe return value will be an
input id ). A LADSPA loader class should be implemented.

	The main classes for JEngine will be: JDecoder, JCrossfader
and (tothink) JOutput. This classes will be formed by a part of the
input-output chain. So JDecoder will inherit Dspunit (1 In & 1 Out),
and will contain: InputSwitcher->Volume->Pitch->Flanger->BandFilter->Gain-> .
Classes Volume, Pitch, Flanger, BandFilter are taken from IzSound, while 
Gain should be encoded ( inherit DspUnit and uses maybe Gain.h from
SndObj library ). Between JDecoder and JOutput will be MCMixer: the latter
will accept more JDecoder input but not only (thinking to device inputs,
Jack ports and so on...). JOutput will set up the output situation and 
connect it to MCMixer. JCrossfader will be a special class: will control
2 JDecoder classes and MCMixer to allow: autogain (use Mp3Gain project
code to detect the right value if enabled by user), sync (Bpm dynamic
calulation if allowed by the user with (maybe) the SoundTouch BpmDetect
code (not yet included in external dir)), beatmatch (with offline or
dynamic retrieved data. If on Linux platforms could be used BpmDj
for offline data) and finally crossfade (maybe different crassfading
behaviours could be implemented).

	At the end we will have the JEngine main class: creates
MCmixer, JOutput and connects them then with interface commands
will create as JDecoder class as needed and will give a pointer
to JCrossfader to allow controlling it. 

o)-> WHO'S WORKING ON WHAT?

-- [ J_Zar ] now working on MCMixer class;

All the rest could be coded by you!!! ;-D


4)---->                    TEST
-------------------------------

	In the "test" directory there is a test program, actually
very useful to tune code components. To build it you need "qmake",
included in the Qt library. Build with "./configure && make".
Read the "readme" file in the dir for more info.


5)---->    AUTHORS & AGREEMENTS
-------------------------------

	Be careful to know the license statement of this program (GPL version 2).
Read the file "license" distributed with this package or visit http://www.gnu.org
for more informations.

Authors of this code are:

o)- Gianluca Romanin (aka J_Zar), (jayorama_AT_users.sourceforge.net):
    the main developer & maintainer.

Some nice code is included and distributed here, in the "external" directory:

o)- IzSound ( http://www.izforge.com/izsound/ ), by Julien PONGE 
    published under a 3 clauses style BSD license (see the related dir 
    for more);

o)- RtAudio ( http://music.mcgill.ca/~gary/rtaudio/ ), by Gary P. Scavone
    published under a custom MIT-like license (see the related dir for 
    more);

o)- headers file of LibMpeg3 ( http://www.heroinewarrior.com ), by Heroine Virtual Ltd.
    published under the GPL license (see the related dir for 
    more);
    
